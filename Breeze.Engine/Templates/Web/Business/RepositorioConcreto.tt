<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Breeze.Engine.Helpers" #>
using System.Collections.Generic;
using System.Linq;
using AutoMapper;
using <#= Metadata.PortalBusinessNamespace #>.<# this.Write(this.GetAreaName()); #>.<#= Metadata.ClassName #>.ViewModels;
using Sigfaz.Infra.Data.Repositorios;

namespace <#= Metadata.PortalBusinessNamespace #>.<# this.Write(this.GetAreaName()); #>.<#= Metadata.ClassName #>
{
    public class Repositorio<#= Metadata.ClassName #> : IRepositorio<#= Metadata.ClassName #>
    {
        private readonly IRepositorio<Models.<# this.Write(this.GetAreaName()); #>.<#= Metadata.ClassName #>> repositorio;

        public Repositorio<#= Metadata.ClassName #>(IRepositorio<Models.<# this.Write(this.GetAreaName()); #>.<#= Metadata.ClassName #>> repositorio)
        {
            this.repositorio = repositorio;
        }

        public <#= Metadata.ClassName #>ViewModel Detalhes(long handle)
        {
            var entidade = repositorio.Retornar(handle);
            var viewmodel = Mapper.Map<<#= Metadata.ClassName #>ViewModel>(entidade);
            return viewmodel;
        }

		 public IEnumerable<#= Metadata.ClassName #>ViewModel ObterPrimeiros(int quantidade)
        {
            var entidades = this.repositorio.RetornarTodos().Take(quantidade).AsEnumerable();

            var resultadoPesquisa = Mapper.Map<IEnumerable<<#= Metadata.ClassName #>ViewModel>>(entidades);
            return resultadoPesquisa;
        }

        public <#= Metadata.ClassName #>ViewModel ObterModelEdicao(long handle)
        {
            return Detalhes(handle);
        }

        public <#= Metadata.ClassName #>ViewModel ObterModelInsercao()
        {
            var viewModel = new <#= Metadata.ClassName #>ViewModel();
            return viewModel;
        }

        public <#= Metadata.ClassName #>ViewModel Salvar(<#= Metadata.ClassName #>ViewModel viewModel)
        {
            var entidade = Mapper.Map<Models.<# this.Write(this.GetAreaName()); #>.<#= Metadata.ClassName #>>(viewModel);
            this.repositorio.Salvar(entidade);
			viewModel.Handle = entidade.Handle;
            return viewModel;
        }

        public void Excluir(long handle)
        {
            var entidade = this.repositorio.Retornar(handle);

            if(entidade != null)    
                this.repositorio.Excluir(entidade);
        }
    }
}